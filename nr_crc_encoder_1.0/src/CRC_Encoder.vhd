-- -------------------------------------------------------------
-- 
-- File Name: /home/apurvan/BBU/CRC_encoder_export/hdlsrc/ltehdlCRCEncoderModel/CRC_Encoder.vhd
-- Created: 2019-12-07 18:56:55
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CRC_Encoder
-- Source Path: ltehdlCRCEncoderModel/HDL Algorithm/CRC Encoder
-- Hierarchy Level: 1
-- 
-- CRC Encoder
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CRC_Encoder IS
  PORT( clk         :   IN    std_logic;
        reset       :   IN    std_logic;
        enb         :   IN    std_logic;
        in0         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        in1_start   :   IN    std_logic;
        in1_end     :   IN    std_logic;
        in1_valid   :   IN    std_logic;
        out0        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        out1_start  :   OUT   std_logic;
        out1_end    :   OUT   std_logic;
        out1_valid  :   OUT   std_logic
        );
END CRC_Encoder;


ARCHITECTURE rtl OF CRC_Encoder IS

  -- Component Declarations
  COMPONENT CRCGenerator
    PORT( clk       :   IN    std_logic;
          reset     :   IN    std_logic;
          enb       :   IN    std_logic;
          dataIn    :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          startIn   :   IN    std_logic;
          endIn     :   IN    std_logic;
          validIn   :   IN    std_logic;
          dataOut   :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          startOut  :   OUT   std_logic;
          endOut    :   OUT   std_logic;
          validOut  :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CRCGenerator
    USE ENTITY work.CRCGenerator(rtl);

  -- Signals
  SIGNAL dataoutgen           : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL startoutgen          : std_logic;
  SIGNAL endoutgen            : std_logic;
  SIGNAL validoutgen          : std_logic;
  SIGNAL dataoutgen_unsigned  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dataOut              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL startOut             : std_logic;
  SIGNAL endOut               : std_logic;
  SIGNAL validOut             : std_logic;

BEGIN
  -- HDL CRC Generator
  u_HDLCRCGen_inst : CRCGenerator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => in0,  -- uint8
              startIn => in1_start,
              endIn => in1_end,
              validIn => in1_valid,
              dataOut => dataoutgen,  -- uint8
              startOut => startoutgen,
              endOut => endoutgen,
              validOut => validoutgen
              );

  dataoutgen_unsigned <= unsigned(dataoutgen);

  dataReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOut <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dataOut <= dataoutgen_unsigned;
      END IF;
    END IF;
  END PROCESS dataReg_process;


  out0 <= std_logic_vector(dataOut);

  startReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      startOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        startOut <= startoutgen;
      END IF;
    END IF;
  END PROCESS startReg_process;


  out1_start <= startOut;

  endReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      endOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        endOut <= endoutgen;
      END IF;
    END IF;
  END PROCESS endReg_process;


  out1_end <= endOut;

  validReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      validOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        validOut <= validoutgen;
      END IF;
    END IF;
  END PROCESS validReg_process;


  out1_valid <= validOut;

END rtl;

